from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.utils.keyboard import ReplyKeyboardBuilder
from aiogram.enums import ContentType
from dotenv import load_dotenv
import asyncio
import os
import logging
from collections import defaultdict

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(levelname)s - %(message)s"
)

load_dotenv()

bot = Bot(token=os.getenv("BOT_TOKEN"))
dp = Dispatcher(storage=MemoryStorage())

CHANNEL_A_ID = os.getenv("CHANNEL_A_ID")
CHANNEL_B_ID = int(os.getenv("CHANNEL_B_ID"))

class ProductState(StatesGroup):
    waiting_for_media = State()
    waiting_for_description = State()
    waiting_for_price_a = State()
    waiting_for_price_b = State()

media_groups = defaultdict(list)

def main_keyboard():
    builder = ReplyKeyboardBuilder()
    builder.button(text="üöÄ Start")
    builder.button(text="üèÅ Finish")
    builder.adjust(2)
    return builder.as_markup(resize_keyboard=True, is_persistent=True)

@dp.message(Command("start"))
@dp.message(lambda message: message.text == "üöÄ Start")
async def start(message: types.Message, state: FSMContext):
    await state.clear()
    media_groups.pop(message.from_user.id, None)
    await state.set_data({"media": []})
    await state.set_state(ProductState.waiting_for_media)
    await message.answer(
        "üì∑ –û—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ —Ñ–æ—Ç–æ –∏ –≤–∏–¥–µ–æ —Ç–æ–≤–∞—Ä–∞ –≤ –ª—é–±–æ–º –ø–æ—Ä—è–¥–∫–µ.\n"
        "–ù–∞–∂–º–∏—Ç–µ üèÅ Finish –∫–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ",
        reply_markup=main_keyboard()
    )

@dp.message(ProductState.waiting_for_media, lambda msg: msg.media_group_id)
async def handle_media_group(message: types.Message):
    try:
        if message.photo:
            media_groups[message.from_user.id].append({
                "type": "photo",
                "file_id": message.photo[-1].file_id
            })
        elif message.video:
            media_groups[message.from_user.id].append({
                "type": "video",
                "file_id": message.video.file_id
            })
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –º–µ–¥–∏–∞–≥—Ä—É–ø–ø—ã: {e}")

@dp.message(Command("done"))
@dp.message(lambda message: message.text == "üèÅ Finish")
async def handle_done(message: types.Message, state: FSMContext):
    data = await state.get_data()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –º–µ–¥–∏–∞ –∏–∑ –≥—Ä—É–ø–ø—ã
    if message.from_user.id in media_groups:
        data["media"].extend(media_groups[message.from_user.id])
        media_groups.pop(message.from_user.id)
    
    if not data["media"]:
        await message.answer("‚ùå –ù–µ—Ç –º–µ–¥–∏–∞ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏!", reply_markup=main_keyboard())
        return
    
    await state.update_data(data)
    await state.set_state(ProductState.waiting_for_description)
    await message.answer(
        f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ –º–µ–¥–∏–∞: {len(data['media'])}\n"
        "üìù –í–≤–µ–¥–∏—Ç–µ –æ–±—â–µ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –ø–æ—Å—Ç–∞:",
        reply_markup=main_keyboard()
    )

@dp.message(ProductState.waiting_for_media)
async def handle_media(message: types.Message, state: FSMContext):
    try:
        media_item = None
        if message.photo:
            media_item = {
                "type": "photo", 
                "file_id": message.photo[-1].file_id
            }
        elif message.video:
            media_item = {
                "type": "video",
                "file_id": message.video.file_id
            }
        
        if media_item:
            async with state.proxy() as data:
                data["media"].append(media_item)
            await message.answer(
                f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ {media_item['type']}. –í—Å–µ–≥–æ: {len(data['media'])}",
                reply_markup=main_keyboard()
            )
        else:
            await message.answer("‚ö†Ô∏è –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∏–ª–∏ –≤–∏–¥–µ–æ!", reply_markup=main_keyboard())

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –º–µ–¥–∏–∞: {e}")

@dp.message(ProductState.waiting_for_description)
async def handle_description(message: types.Message, state: FSMContext):
    if not message.text:
        await message.answer("‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ!", reply_markup=main_keyboard())
        return
    
    await state.update_data(description=message.text)
    await state.set_state(ProductState.waiting_for_price_a)
    await message.answer("üí∞ –í–≤–µ–¥–∏—Ç–µ —Ä–æ–∑–Ω–∏—á–Ω—É—é —Ü–µ–Ω—É (—Å–æ–º):", reply_markup=main_keyboard())

@dp.message(ProductState.waiting_for_price_a)
async def handle_price_a(message: types.Message, state: FSMContext):
    if not message.text.isdigit():
        await message.answer("‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ!", reply_markup=main_keyboard())
        return
    
    await state.update_data(price_a=message.text)
    await state.set_state(ProductState.waiting_for_price_b)
    await message.answer("üí∞ –í–≤–µ–¥–∏—Ç–µ –æ–ø—Ç–æ–≤—É—é —Ü–µ–Ω—É (—Å–æ–º):", reply_markup=main_keyboard())

@dp.message(ProductState.waiting_for_price_b)
async def handle_price_b(message: types.Message, state: FSMContext):
    if not message.text.isdigit():
        await message.answer("‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ!", reply_markup=main_keyboard())
        return

    try:
        data = await state.get_data()
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –º–µ–¥–∏–∞-–∞–ª—å–±–æ–º—ã
        def create_media_group(price, caption_suffix):
            media = []
            for i, item in enumerate(data["media"]):
                caption = f"üè∑ {data['description']}\nüíµ {caption_suffix}: {price} –°–û–ú" if i == 0 else None
                
                if item["type"] == "photo":
                    media.append(types.InputMediaPhoto(
                        media=item["file_id"],
                        caption=caption
                    ))
                else:
                    media.append(types.InputMediaVideo(
                        media=item["file_id"],
                        caption=caption
                    ))
            return media

        # –î–ª—è —Ä–æ–∑–Ω–∏—á–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞
        retail_media = create_media_group(data["price_a"], "–¶–µ–Ω–∞:")
        await bot.send_media_group(CHANNEL_A_ID, media=retail_media)

        # –î–ª—è –æ–ø—Ç–æ–≤–æ–≥–æ –∫–∞–Ω–∞–ª–∞
        wholesale_media = create_media_group(message.text, "–¶–µ–Ω–∞:")
        await bot.send_media_group(CHANNEL_B_ID, media=wholesale_media)
        
        await message.answer("‚úÖ –ü–æ—Å—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –≤ –æ–±–∞ –∫–∞–Ω–∞–ª–∞!", reply_markup=main_keyboard())
    
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}", reply_markup=main_keyboard())
    
    finally:
        await state.clear()

if __name__ == '__main__':
    asyncio.run(dp.start_polling(bot))